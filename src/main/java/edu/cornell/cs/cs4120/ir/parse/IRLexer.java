// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/edu/cornell/cs/cs4120/ir/parse/ir.flex

package edu.cornell.cs.cs4120.ir.parse;

import java.math.BigInteger;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class IRLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u1b00\121\u0100\1\u2500\4\u0100\1\u2600"+
    "\1\u0100\1\u2700\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\53\u0100"+
    "\1\u2d00\41\u1f00\1\u0100\1\u2e00\1\u2f00\1\u0100\1\u3000\1\u3100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100"+
    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00\1\u4f00"+
    "\1\u5000\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00\4\u0100\1\u5400"+
    "\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600\1\u5700\2\u1f00"+
    "\1\u5800\1\u5900\27\u0100\1\u5a00\4\u0100\1\u5b00\1\u5c00\42\u1f00"+
    "\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\27\u1f00\1\u6000\1\u6100"+
    "\1\u6200\1\u6300\11\u1f00\1\u6400\1\u6500\5\u1f00\1\u6600\1\u6700"+
    "\2\u1f00\1\u6800\1\u1f00\1\u6900\21\u1f00\246\u0100\1\u6a00\20\u0100"+
    "\1\u6b00\1\u6c00\25\u0100\1\u6d00\34\u0100\1\u6e00\14\u1f00\2\u0100"+
    "\1\u6f00\5\u1f00\23\u0100\1\u7000\u0dec\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\3\0\1\4\2\0\1\5\1\6\1\7\1\5\2\0"+
    "\1\10\1\5\1\0\1\11\11\12\7\0\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\4\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\4\1\40\2\4\4\0"+
    "\1\41\1\0\32\4\47\0\4\4\4\0\1\4\12\0"+
    "\1\4\4\0\1\4\5\0\27\4\1\0\37\4\1\0"+
    "\u01ca\4\4\0\14\4\16\0\5\4\7\0\1\4\1\0"+
    "\1\4\201\0\5\4\1\0\2\4\2\0\4\4\1\0"+
    "\1\4\6\0\1\4\1\0\3\4\1\0\1\4\1\0"+
    "\24\4\1\0\123\4\1\0\213\4\10\0\246\4\1\0"+
    "\46\4\2\0\1\4\6\0\51\4\6\0\1\4\100\0"+
    "\33\4\4\0\4\4\30\0\1\4\24\0\53\4\43\0"+
    "\2\4\1\0\143\4\1\0\1\4\17\0\2\4\7\0"+
    "\2\4\12\0\3\4\2\0\1\4\20\0\1\4\1\0"+
    "\36\4\35\0\131\4\13\0\1\4\30\0\41\4\11\0"+
    "\2\4\4\0\1\4\3\0\30\4\4\0\1\4\11\0"+
    "\1\4\3\0\1\4\27\0\31\4\7\0\13\4\65\0"+
    "\25\4\1\0\22\4\74\0\66\4\3\0\1\4\22\0"+
    "\1\4\7\0\12\4\17\0\20\4\4\0\10\4\2\0"+
    "\2\4\2\0\26\4\1\0\7\4\1\0\1\4\3\0"+
    "\4\4\3\0\1\4\20\0\1\4\15\0\2\4\1\0"+
    "\3\4\16\0\4\4\7\0\2\4\10\0\6\4\4\0"+
    "\2\4\2\0\26\4\1\0\7\4\1\0\2\4\1\0"+
    "\2\4\1\0\2\4\37\0\4\4\1\0\1\4\23\0"+
    "\3\4\20\0\11\4\1\0\3\4\1\0\26\4\1\0"+
    "\7\4\1\0\2\4\1\0\5\4\3\0\1\4\22\0"+
    "\1\4\17\0\2\4\17\0\1\4\7\0\1\4\13\0"+
    "\10\4\2\0\2\4\2\0\26\4\1\0\7\4\1\0"+
    "\2\4\1\0\5\4\3\0\1\4\36\0\2\4\1\0"+
    "\3\4\17\0\1\4\21\0\1\4\1\0\6\4\3\0"+
    "\3\4\1\0\4\4\3\0\2\4\1\0\1\4\1\0"+
    "\2\4\3\0\2\4\3\0\3\4\3\0\14\4\26\0"+
    "\1\4\50\0\1\4\13\0\10\4\1\0\3\4\1\0"+
    "\27\4\1\0\20\4\3\0\1\4\32\0\3\4\5\0"+
    "\2\4\36\0\1\4\4\0\10\4\1\0\3\4\1\0"+
    "\27\4\1\0\12\4\1\0\5\4\3\0\1\4\40\0"+
    "\1\4\1\0\2\4\17\0\2\4\21\0\11\4\1\0"+
    "\3\4\1\0\51\4\2\0\1\4\20\0\1\4\5\0"+
    "\3\4\10\0\3\4\30\0\6\4\5\0\22\4\3\0"+
    "\30\4\1\0\11\4\1\0\1\4\2\0\7\4\72\0"+
    "\60\4\1\0\2\4\13\0\10\4\72\0\2\4\1\0"+
    "\1\4\1\0\5\4\1\0\30\4\1\0\1\4\1\0"+
    "\12\4\1\0\2\4\11\0\1\4\2\0\5\4\1\0"+
    "\1\4\25\0\4\4\40\0\1\4\77\0\10\4\1\0"+
    "\44\4\33\0\5\4\163\0\53\4\24\0\1\4\20\0"+
    "\6\4\4\0\4\4\3\0\1\4\3\0\2\4\7\0"+
    "\3\4\4\0\15\4\14\0\1\4\21\0\46\4\1\0"+
    "\1\4\5\0\1\4\2\0\53\4\1\0\115\4\1\0"+
    "\4\4\2\0\7\4\1\0\1\4\1\0\4\4\2\0"+
    "\51\4\1\0\4\4\2\0\41\4\1\0\4\4\2\0"+
    "\7\4\1\0\1\4\1\0\4\4\2\0\17\4\1\0"+
    "\71\4\1\0\4\4\2\0\103\4\45\0\20\4\20\0"+
    "\126\4\2\0\6\4\3\0\u016c\4\2\0\21\4\1\0"+
    "\32\4\5\0\113\4\3\0\13\4\7\0\15\4\1\0"+
    "\4\4\16\0\22\4\16\0\22\4\16\0\15\4\1\0"+
    "\3\4\17\0\64\4\43\0\1\4\3\0\2\4\103\0"+
    "\131\4\7\0\5\4\2\0\42\4\1\0\1\4\5\0"+
    "\106\4\12\0\37\4\61\0\36\4\2\0\5\4\13\0"+
    "\54\4\4\0\32\4\66\0\27\4\11\0\65\4\122\0"+
    "\1\4\135\0\57\4\21\0\7\4\67\0\36\4\15\0"+
    "\2\4\12\0\54\4\32\0\44\4\51\0\3\4\12\0"+
    "\44\4\2\0\11\4\7\0\53\4\2\0\3\4\51\0"+
    "\4\4\1\0\6\4\1\0\2\4\3\0\1\4\5\0"+
    "\300\4\100\0\26\4\2\0\6\4\2\0\46\4\2\0"+
    "\6\4\2\0\10\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\37\4\2\0\65\4\1\0\7\4\1\0"+
    "\1\4\3\0\3\4\1\0\7\4\3\0\4\4\2\0"+
    "\6\4\4\0\15\4\5\0\3\4\1\0\7\4\102\0"+
    "\2\4\23\0\1\4\34\0\1\4\15\0\1\4\20\0"+
    "\15\4\3\0\40\4\102\0\1\4\4\0\1\4\2\0"+
    "\12\4\1\0\1\4\3\0\5\4\6\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\4\4\1\0\13\4\2\0"+
    "\4\4\5\0\5\4\4\0\1\4\21\0\51\4\u0177\0"+
    "\57\4\1\0\57\4\1\0\205\4\6\0\4\4\3\0"+
    "\2\4\14\0\46\4\1\0\1\4\5\0\1\4\2\0"+
    "\70\4\7\0\1\4\20\0\27\4\11\0\7\4\1\0"+
    "\7\4\1\0\7\4\1\0\7\4\1\0\7\4\1\0"+
    "\7\4\1\0\7\4\1\0\7\4\120\0\1\4\325\0"+
    "\3\4\31\0\11\4\7\0\5\4\2\0\5\4\4\0"+
    "\126\4\6\0\3\4\1\0\132\4\1\0\4\4\5\0"+
    "\53\4\1\0\136\4\21\0\40\4\60\0\u010d\4\3\0"+
    "\215\4\103\0\56\4\2\0\15\4\3\0\20\4\12\0"+
    "\2\4\24\0\57\4\20\0\37\4\2\0\120\4\47\0"+
    "\11\4\2\0\147\4\2\0\65\4\2\0\11\4\52\0"+
    "\15\4\1\0\3\4\1\0\4\4\1\0\27\4\25\0"+
    "\1\4\7\0\64\4\16\0\62\4\76\0\6\4\3\0"+
    "\1\4\1\0\2\4\13\0\34\4\12\0\27\4\31\0"+
    "\35\4\7\0\57\4\34\0\1\4\20\0\5\4\1\0"+
    "\12\4\12\0\5\4\1\0\51\4\27\0\3\4\1\0"+
    "\10\4\24\0\27\4\3\0\1\4\3\0\62\4\1\0"+
    "\1\4\3\0\2\4\2\0\5\4\2\0\1\4\1\0"+
    "\1\4\30\0\3\4\2\0\13\4\7\0\3\4\14\0"+
    "\6\4\2\0\6\4\2\0\6\4\11\0\7\4\1\0"+
    "\7\4\1\0\53\4\1\0\16\4\6\0\163\4\35\0"+
    "\244\4\14\0\27\4\4\0\61\4\4\0\156\4\2\0"+
    "\152\4\46\0\7\4\14\0\5\4\5\0\1\4\1\0"+
    "\12\4\1\0\15\4\1\0\5\4\1\0\1\4\1\0"+
    "\2\4\1\0\2\4\1\0\154\4\41\0\153\4\22\0"+
    "\100\4\2\0\66\4\50\0\15\4\66\0\2\4\30\0"+
    "\3\4\31\0\1\4\6\0\5\4\1\0\207\4\7\0"+
    "\1\4\34\0\32\4\4\0\1\4\1\0\32\4\13\0"+
    "\131\4\3\0\6\4\2\0\6\4\2\0\6\4\2\0"+
    "\3\4\3\0\2\4\3\0\2\4\31\0\14\4\1\0"+
    "\32\4\1\0\23\4\1\0\2\4\1\0\17\4\2\0"+
    "\16\4\42\0\173\4\105\0\65\4\u010b\0\35\4\3\0"+
    "\61\4\57\0\40\4\15\0\36\4\5\0\46\4\12\0"+
    "\36\4\2\0\44\4\4\0\10\4\1\0\5\4\52\0"+
    "\236\4\22\0\44\4\4\0\44\4\4\0\50\4\10\0"+
    "\64\4\234\0\67\4\11\0\26\4\12\0\10\4\230\0"+
    "\6\4\2\0\1\4\1\0\54\4\1\0\2\4\3\0"+
    "\1\4\2\0\27\4\12\0\27\4\11\0\37\4\101\0"+
    "\23\4\1\0\2\4\12\0\26\4\12\0\32\4\106\0"+
    "\70\4\6\0\2\4\100\0\1\4\17\0\4\4\1\0"+
    "\3\4\1\0\35\4\52\0\35\4\3\0\35\4\43\0"+
    "\10\4\1\0\34\4\33\0\66\4\12\0\26\4\12\0"+
    "\23\4\15\0\22\4\156\0\111\4\67\0\63\4\15\0"+
    "\63\4\15\0\44\4\u015c\0\52\4\6\0\2\4\116\0"+
    "\35\4\12\0\1\4\10\0\26\4\152\0\25\4\33\0"+
    "\27\4\14\0\65\4\113\0\55\4\40\0\31\4\32\0"+
    "\44\4\35\0\1\4\2\0\1\4\10\0\43\4\3\0"+
    "\1\4\14\0\60\4\16\0\4\4\25\0\1\4\1\0"+
    "\1\4\43\0\22\4\1\0\31\4\124\0\7\4\1\0"+
    "\1\4\1\0\4\4\1\0\17\4\1\0\12\4\7\0"+
    "\57\4\46\0\10\4\2\0\2\4\2\0\26\4\1\0"+
    "\7\4\1\0\2\4\1\0\5\4\3\0\1\4\22\0"+
    "\1\4\14\0\5\4\236\0\65\4\22\0\4\4\24\0"+
    "\3\4\36\0\60\4\24\0\2\4\1\0\1\4\270\0"+
    "\57\4\51\0\4\4\44\0\60\4\24\0\1\4\73\0"+
    "\53\4\15\0\1\4\107\0\33\4\345\0\54\4\164\0"+
    "\100\4\37\0\10\4\2\0\1\4\2\0\10\4\1\0"+
    "\2\4\1\0\30\4\17\0\1\4\1\0\1\4\136\0"+
    "\10\4\2\0\47\4\20\0\1\4\1\0\1\4\34\0"+
    "\1\4\12\0\50\4\7\0\1\4\25\0\1\4\13\0"+
    "\56\4\23\0\1\4\42\0\71\4\7\0\11\4\1\0"+
    "\45\4\21\0\1\4\61\0\36\4\160\0\7\4\1\0"+
    "\2\4\1\0\46\4\25\0\1\4\31\0\6\4\1\0"+
    "\2\4\1\0\40\4\16\0\1\4\u0147\0\23\4\275\0"+
    "\1\4\54\0\4\4\37\0\232\4\146\0\157\4\21\0"+
    "\304\4\274\0\57\4\321\0\107\4\271\0\71\4\7\0"+
    "\37\4\161\0\36\4\22\0\60\4\20\0\4\4\37\0"+
    "\25\4\5\0\23\4\260\0\100\4\200\0\113\4\5\0"+
    "\1\4\102\0\15\4\100\0\2\4\1\0\1\4\34\0"+
    "\370\4\10\0\326\4\52\0\11\4\367\0\37\4\61\0"+
    "\3\4\21\0\4\4\10\0\u018c\4\4\0\153\4\5\0"+
    "\15\4\3\0\11\4\7\0\12\4\146\0\125\4\1\0"+
    "\107\4\1\0\2\4\2\0\1\4\2\0\2\4\2\0"+
    "\4\4\1\0\14\4\1\0\1\4\1\0\7\4\1\0"+
    "\101\4\1\0\4\4\2\0\10\4\1\0\7\4\1\0"+
    "\34\4\1\0\4\4\1\0\5\4\1\0\1\4\3\0"+
    "\7\4\1\0\u0154\4\2\0\31\4\1\0\31\4\1\0"+
    "\37\4\1\0\31\4\1\0\37\4\1\0\31\4\1\0"+
    "\37\4\1\0\31\4\1\0\37\4\1\0\31\4\1\0"+
    "\10\4\64\0\55\4\12\0\7\4\20\0\1\4\u0171\0"+
    "\54\4\23\0\306\4\73\0\104\4\7\0\1\4\u0164\0"+
    "\1\4\117\0\4\4\1\0\33\4\1\0\2\4\1\0"+
    "\1\4\2\0\1\4\1\0\12\4\1\0\4\4\1\0"+
    "\1\4\1\0\1\4\6\0\1\4\4\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\3\4\1\0\2\4\1\0"+
    "\1\4\2\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\2\4\1\0\1\4\2\0"+
    "\4\4\1\0\7\4\1\0\4\4\1\0\4\4\1\0"+
    "\1\4\1\0\12\4\1\0\21\4\5\0\3\4\1\0"+
    "\5\4\1\0\21\4\104\0\336\4\42\0\65\4\13\0"+
    "\336\4\2\0\u0182\4\16\0\u0131\4\37\0\36\4\342\0"+
    "\113\4\265\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[28928];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\5\1\1"+
    "\2\6\21\3\1\0\10\3\1\7\4\3\1\10\5\3"+
    "\1\11\5\3\1\12\7\3\1\13\1\14\6\3\1\15"+
    "\1\3\1\16\1\3\1\17\3\3\1\20\1\3\1\21"+
    "\1\22\1\3\1\23\1\3\1\24\2\3\1\25\1\26"+
    "\1\3\1\27\1\30\1\3\1\31\3\3\1\32\1\33"+
    "\1\34\1\35\1\36\2\3\1\37\1\40\2\3\1\41"+
    "\2\3\1\42\1\3\1\43\1\44\6\3\1\45\1\46"+
    "\1\47\1\50\3\3\1\51\1\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\42\0\104\0\146\0\210\0\42\0\42"+
    "\0\252\0\210\0\314\0\356\0\u0110\0\u0132\0\u0154\0\u0176"+
    "\0\u0198\0\u01ba\0\u01dc\0\u01fe\0\u0220\0\u0242\0\u0264\0\u0286"+
    "\0\u02a8\0\u02ca\0\u02ec\0\u030e\0\210\0\u0330\0\u0352\0\u0374"+
    "\0\u0396\0\u03b8\0\u03da\0\u03fc\0\u041e\0\146\0\u0440\0\u0462"+
    "\0\u0484\0\u04a6\0\146\0\u04c8\0\u04ea\0\u050c\0\u052e\0\u0550"+
    "\0\146\0\u0572\0\u0594\0\u05b6\0\u05d8\0\u05fa\0\146\0\u061c"+
    "\0\u063e\0\u0660\0\u0682\0\u06a4\0\u06c6\0\u06e8\0\146\0\146"+
    "\0\u070a\0\u072c\0\u074e\0\u0770\0\u0792\0\u07b4\0\146\0\u07d6"+
    "\0\146\0\u07f8\0\146\0\u081a\0\u083c\0\u085e\0\146\0\u0880"+
    "\0\146\0\146\0\u08a2\0\146\0\u08c4\0\146\0\u08e6\0\u0908"+
    "\0\146\0\146\0\u092a\0\146\0\146\0\u094c\0\u096e\0\u0990"+
    "\0\u09b2\0\u09d4\0\146\0\146\0\146\0\146\0\146\0\u09f6"+
    "\0\u0a18\0\146\0\146\0\u0a3a\0\u0a5c\0\146\0\u0a7e\0\u0aa0"+
    "\0\146\0\u0ac2\0\146\0\146\0\u0ae4\0\u0b06\0\u0b28\0\u0b4a"+
    "\0\u0b6c\0\u0b8e\0\146\0\146\0\146\0\146\0\u0bb0\0\u0bd2"+
    "\0\u0bf4\0\146\0\146";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\5\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\5\1\23\1\24\1\25\1\26\1\27"+
    "\2\5\1\30\1\31\1\32\1\33\1\5\1\34\1\5"+
    "\44\0\1\3\43\0\2\5\2\0\32\5\4\0\1\5"+
    "\1\35\2\0\3\35\27\5\4\0\1\5\1\35\2\0"+
    "\2\35\1\13\27\5\4\0\1\5\1\35\2\0\1\35"+
    "\2\13\27\5\4\0\2\5\2\0\6\5\1\36\10\5"+
    "\1\37\3\5\1\40\6\5\4\0\2\5\2\0\3\5"+
    "\1\41\10\5\1\42\3\5\1\43\11\5\4\0\2\5"+
    "\2\0\3\5\1\44\7\5\1\45\16\5\4\0\2\5"+
    "\2\0\22\5\1\46\1\5\1\47\3\5\1\50\1\5"+
    "\4\0\2\5\2\0\26\5\1\51\3\5\4\0\2\5"+
    "\2\0\7\5\1\52\15\5\1\53\4\5\4\0\2\5"+
    "\2\0\16\5\1\54\13\5\4\0\2\5\2\0\26\5"+
    "\1\55\3\5\4\0\2\5\2\0\3\5\1\56\3\5"+
    "\1\57\14\5\1\60\1\61\4\5\4\0\2\5\2\0"+
    "\7\5\1\62\10\5\1\63\5\5\1\64\3\5\4\0"+
    "\2\5\2\0\3\5\1\65\3\5\1\66\22\5\4\0"+
    "\2\5\2\0\23\5\1\67\6\5\4\0\2\5\2\0"+
    "\7\5\1\70\14\5\1\71\5\5\4\0\2\5\2\0"+
    "\7\5\1\72\16\5\1\73\3\5\4\0\2\5\2\0"+
    "\7\5\1\74\22\5\4\0\2\5\2\0\15\5\1\75"+
    "\14\5\4\0\2\5\2\0\20\5\1\76\11\5\4\0"+
    "\2\5\2\0\6\5\1\77\23\5\4\0\2\5\2\0"+
    "\6\5\1\100\23\5\4\0\2\5\2\0\24\5\1\101"+
    "\5\5\4\0\2\5\2\0\15\5\1\102\14\5\4\0"+
    "\2\5\2\0\26\5\1\103\3\5\4\0\2\5\2\0"+
    "\16\5\1\104\1\105\12\5\4\0\2\5\2\0\25\5"+
    "\1\106\4\5\4\0\2\5\2\0\27\5\1\107\2\5"+
    "\4\0\2\5\2\0\7\5\1\110\22\5\4\0\2\5"+
    "\2\0\21\5\1\111\10\5\4\0\2\5\2\0\17\5"+
    "\1\112\12\5\4\0\2\5\2\0\22\5\1\113\7\5"+
    "\4\0\2\5\2\0\26\5\1\114\3\5\4\0\2\5"+
    "\2\0\16\5\1\115\13\5\4\0\2\5\2\0\4\5"+
    "\1\116\25\5\4\0\2\5\2\0\22\5\1\117\7\5"+
    "\4\0\2\5\2\0\12\5\1\120\17\5\4\0\2\5"+
    "\2\0\16\5\1\121\13\5\4\0\2\5\2\0\6\5"+
    "\1\122\20\5\1\123\2\5\4\0\2\5\2\0\15\5"+
    "\1\124\14\5\4\0\2\5\2\0\16\5\1\125\13\5"+
    "\4\0\2\5\2\0\22\5\1\126\7\5\4\0\2\5"+
    "\2\0\25\5\1\127\4\5\4\0\2\5\2\0\12\5"+
    "\1\130\17\5\4\0\2\5\2\0\22\5\1\131\7\5"+
    "\4\0\2\5\2\0\4\5\1\132\25\5\4\0\2\5"+
    "\2\0\16\5\1\133\13\5\4\0\2\5\2\0\25\5"+
    "\1\134\4\5\4\0\2\5\2\0\23\5\1\135\6\5"+
    "\4\0\2\5\2\0\12\5\1\136\17\5\4\0\2\5"+
    "\2\0\15\5\1\137\14\5\4\0\2\5\2\0\16\5"+
    "\1\140\13\5\4\0\2\5\2\0\21\5\1\141\10\5"+
    "\4\0\2\5\2\0\24\5\1\142\5\5\4\0\2\5"+
    "\2\0\3\5\1\143\26\5\4\0\2\5\2\0\22\5"+
    "\1\144\7\5\4\0\2\5\2\0\5\5\1\145\24\5"+
    "\4\0\2\5\2\0\15\5\1\146\14\5\4\0\2\5"+
    "\2\0\21\5\1\147\10\5\4\0\2\5\2\0\7\5"+
    "\1\150\22\5\4\0\2\5\2\0\13\5\1\151\16\5"+
    "\4\0\2\5\2\0\7\5\1\152\22\5\4\0\2\5"+
    "\2\0\7\5\1\153\22\5\4\0\2\5\2\0\26\5"+
    "\1\154\3\5\4\0\2\5\2\0\13\5\1\155\16\5"+
    "\4\0\2\5\2\0\21\5\1\156\10\5\4\0\2\5"+
    "\2\0\13\5\1\157\16\5\4\0\2\5\2\0\31\5"+
    "\1\160\4\0\2\5\2\0\21\5\1\161\10\5\4\0"+
    "\2\5\2\0\26\5\1\162\3\5\4\0\2\5\2\0"+
    "\25\5\1\163\4\5\4\0\2\5\2\0\15\5\1\164"+
    "\14\5\4\0\2\5\2\0\10\5\1\165\21\5\4\0"+
    "\2\5\2\0\23\5\1\166\6\5\4\0\2\5\2\0"+
    "\10\5\1\167\21\5\4\0\2\5\2\0\10\5\1\170"+
    "\21\5\4\0\2\5\2\0\24\5\1\171\5\5\4\0"+
    "\2\5\2\0\17\5\1\172\12\5\4\0\2\5\2\0"+
    "\25\5\1\173\4\5\4\0\2\5\2\0\17\5\1\174"+
    "\12\5\4\0\2\5\2\0\25\5\1\175\4\5\4\0"+
    "\2\5\2\0\25\5\1\176\4\5\4\0\2\5\2\0"+
    "\25\5\1\177\4\5\4\0\2\5\2\0\13\5\1\200"+
    "\16\5\4\0\2\5\2\0\16\5\1\201\13\5\4\0"+
    "\2\5\2\0\25\5\1\202\4\5\4\0\2\5\2\0"+
    "\25\5\1\203\4\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3094];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\2\11\24\1\1\0\146\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[131];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private static ComplexSymbolFactory csf = new ComplexSymbolFactory();

    private Symbol sym(String name, int id) {
        return csf.newSymbol(name, id, beginPos(), endPos());
    }

    private Symbol name(String s) {
        return new Name(s, beginPos(), endPos());
    }

    private Symbol number(String s) {
        BigInteger x = new BigInteger(s);
        if (x.bitLength() > 64) {
            return lexError("Number literal \"" +
                        yytext() + "\" out of range.");
        }
        return new Number(x.longValue(), beginPos(), endPos());
    }

    private Symbol lexError(String msg) {
        System.err.println(msg);
        return new LexErrorToken(beginPos(), endPos());
    }

    private Position beginPos() {
        return new Position(yyline+1, yycolumn+1);
    }

    private Position endPos() {
        int len = yytext().length();
        return new Position(yyline+1, yycolumn+1+len);
    }

private static class Position extends Location {
    public Position(int line, int column) {
        super(line, column);
    }

    @Override
    public String toString() {
        return getLine() + ":" + getColumn();
    }
}

static class Name extends ComplexSymbol {
    public Name(String name, Position left, Position right) {
        super("NAME", IRSym.ATOM, left, right, name);
    }
}

static class Number extends ComplexSymbol {
    public Number(long val, Position left, Position right) {
        super("NUMBER", IRSym.NUMBER, left, right, val);
    }
}

static class LexErrorToken extends ComplexSymbol {
    public LexErrorToken(Position left, Position right) {
        super("error", IRSym.error, left, right);
    }

    @Override
    public String toString() {
        return "lexical error";
    }
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public IRLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return sym("EOF", IRSym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return lexError(beginPos() + ": Illegal character \"" +
                                 yytext() + "\"");
            }
            // fall through
          case 43: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 44: break;
          case 3:
            { return name(yytext());
            }
            // fall through
          case 45: break;
          case 4:
            { return sym("(", IRSym.LPAREN);
            }
            // fall through
          case 46: break;
          case 5:
            { return sym(")", IRSym.RPAREN);
            }
            // fall through
          case 47: break;
          case 6:
            { return number(yytext());
            }
            // fall through
          case 48: break;
          case 7:
            { return sym("EQ", IRSym.EQ);
            }
            // fall through
          case 49: break;
          case 8:
            { return sym("GT", IRSym.GT);
            }
            // fall through
          case 50: break;
          case 9:
            { return sym("LT", IRSym.LT);
            }
            // fall through
          case 51: break;
          case 10:
            { return sym("OR", IRSym.OR);
            }
            // fall through
          case 52: break;
          case 11:
            { return sym("ADD", IRSym.ADD);
            }
            // fall through
          case 53: break;
          case 12:
            { return sym("AND", IRSym.AND);
            }
            // fall through
          case 54: break;
          case 13:
            { return sym("DIV", IRSym.DIV);
            }
            // fall through
          case 55: break;
          case 14:
            { return sym("EXP", IRSym.EXP);
            }
            // fall through
          case 56: break;
          case 15:
            { return sym("GEQ", IRSym.GEQ);
            }
            // fall through
          case 57: break;
          case 16:
            { return sym("LEQ", IRSym.LEQ);
            }
            // fall through
          case 58: break;
          case 17:
            { return sym("MEM", IRSym.MEM);
            }
            // fall through
          case 59: break;
          case 18:
            { return sym("MOD", IRSym.MOD);
            }
            // fall through
          case 60: break;
          case 19:
            { return sym("MUL", IRSym.MUL);
            }
            // fall through
          case 61: break;
          case 20:
            { return sym("NEQ", IRSym.NEQ);
            }
            // fall through
          case 62: break;
          case 21:
            { return sym("SEQ", IRSym.SEQ);
            }
            // fall through
          case 63: break;
          case 22:
            { return sym("SUB", IRSym.SUB);
            }
            // fall through
          case 64: break;
          case 23:
            { return sym("ULT", IRSym.ULT);
            }
            // fall through
          case 65: break;
          case 24:
            { return sym("XOR", IRSym.XOR);
            }
            // fall through
          case 66: break;
          case 25:
            { return sym("CALL", IRSym.CALL);
            }
            // fall through
          case 67: break;
          case 26:
            { return sym("CTOR", IRSym.DATA);
            }
            // fall through
          case 68: break;
          case 27:
            { return sym("ESEQ", IRSym.ESEQ);
            }
            // fall through
          case 69: break;
          case 28:
            { return sym("FUNC", IRSym.FUNC);
            }
            // fall through
          case 70: break;
          case 29:
            { return sym("HMUL", IRSym.HMUL);
            }
            // fall through
          case 71: break;
          case 30:
            { return sym("JUMP", IRSym.JUMP);
            }
            // fall through
          case 72: break;
          case 31:
            { return sym("MOVE", IRSym.MOVE);
            }
            // fall through
          case 73: break;
          case 32:
            { return sym("NAME", IRSym.NAME);
            }
            // fall through
          case 74: break;
          case 33:
            { return sym("TEMP", IRSym.TEMP);
            }
            // fall through
          case 75: break;
          case 34:
            { return sym("CJUMP", IRSym.CJUMP);
            }
            // fall through
          case 76: break;
          case 35:
            { return sym("CONST", IRSym.CONST);
            }
            // fall through
          case 77: break;
          case 36:
            { return sym("LABEL", IRSym.LABEL);
            }
            // fall through
          case 78: break;
          case 37:
            { return sym("LSHIFT", IRSym.LSHIFT);
            }
            // fall through
          case 79: break;
          case 38:
            { return sym("RETURN", IRSym.RETURN);
            }
            // fall through
          case 80: break;
          case 39:
            { return sym("RSHIFT", IRSym.RSHIFT);
            }
            // fall through
          case 81: break;
          case 40:
            { return sym("ARSHIFT", IRSym.ARSHIFT);
            }
            // fall through
          case 82: break;
          case 41:
            { return sym("COMPUNIT", IRSym.COMPUNIT);
            }
            // fall through
          case 83: break;
          case 42:
            { return sym("CALL_STMT", IRSym.CALL_STMT);
            }
            // fall through
          case 84: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
