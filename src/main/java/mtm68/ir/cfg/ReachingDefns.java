package mtm68.ir.cfg;

import java.io.IOException;
import java.io.Writer;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import edu.cornell.cs.cs4120.ir.IRExpr;
import edu.cornell.cs.cs4120.ir.IRFuncDefn;
import edu.cornell.cs.cs4120.ir.IRMove;
import edu.cornell.cs.cs4120.ir.IRNodeFactory;
import edu.cornell.cs.cs4120.ir.IRSeq;
import edu.cornell.cs.cs4120.ir.IRStmt;
import edu.cornell.cs.cs4120.ir.IRTemp;
import mtm68.assem.cfg.Graph;
import mtm68.assem.cfg.Graph.Node;
import mtm68.ir.cfg.IRCFGBuilder.IRData;
import mtm68.util.SetUtils;

public class ReachingDefns {

	private Graph<IRData<ReachingData>> graph;
	private IRCFGBuilder<ReachingData> builder;
	
	private IRFuncDefn ir;
	private IRNodeFactory f;

	public ReachingDefns(IRFuncDefn ir, IRNodeFactory f) {
		builder = new IRCFGBuilder<>();
		this.ir = ir;
		this.f = f;
	}
	
	public void performReachingDefnsAnalysis() {

		IRStmt body = ir.body();
	    List<IRStmt> stmts = ((IRSeq)body).stmts();

		graph = builder.buildIRCFG(stmts, ReachingData::new);
		List<Node> nodes = graph.getNodes();
		
		boolean changes = true;
		while (changes) {
			changes = false;
			
			for(Node node : nodes) {
				IRData<ReachingData> data = graph.getDataForNode(node);
				ReachingData flowData = data.getFlowData();
				
				
				Set<ReachingDefn> inOld = flowData.getIn();
				Set<ReachingDefn> outOld = flowData.getOut();
				
				Set<ReachingDefn> in = in(node);
				Set<ReachingDefn> out = out(node);
				
				flowData.setIn(in);
				flowData.setOut(out);
				
				changes = changes || (!inOld.equals(in) || !outOld.equals(out));
			}
		}
	}
	
	/**
	 * The set of definitions reaching a node.
	 * in[n] = definitions reaching on any edges into n.
	 */
	private Set<ReachingDefn> in(Node node) {
		Set<ReachingDefn> in = SetUtils.empty();
		for(Node pred : node.pred()) {
			Set<ReachingDefn> predData = graph.getDataForNode(pred)
											   .getFlowData()
											   .getOut();
			/**
			* The first iteration, we need to set the base set 
			* because intersect with empty set will always be empty
			* and there is no good way to set the initial set
			* as the empty set
			*/
			in = SetUtils.union(in, predData);
		}

		return in;
	}

	/**
	 * The set of available expressions on edges leaving node n.
	 * out[n] = gen[n] U (in(n) - kill(n))
	 */
	 private Set<ReachingDefn> out(Node n) {

		Set<ReachingDefn> gen = gen(n);
		Set<ReachingDefn> in = in(n);
		Set<ReachingDefn> kill = kill(n, in);
		
		Set<ReachingDefn> difference = SetUtils.difference(in, kill);
		 
		return SetUtils.union(gen , difference);
	 }
	 
	
	/**
	 * Definitions generated by a node.
	 * 
	 * For example,
	 * gen(x <- e) = node 
	 * else 	   = {}
	 */
	private Set<ReachingDefn> gen(Node node) {
		IRStmt ir = graph.getDataForNode(node).getIR();

		if (hasXGetsEForm(ir)) {
			return genXGetsE((IRMove)ir, node);

		} else {
			return SetUtils.empty();
		}
	}

	private Set<ReachingDefn> genXGetsE(IRMove mov, Node d) {
		return mov.source().getTemps()
			       .stream()
			       .map(e -> new ReachingDefn(e, d))
				   .collect(Collectors.toSet());
	}

	/**
	 * Expressions killed by a node that has facts l.
	 * 
	 * For example,
	 * kill(x <- e)       = defs(x)
	 * kill(if e)         = {}
	 * 
	 * Where defs(x) denotes set of notes that define variable x
	 */
	private Set<ReachingDefn> kill(Node node, Set<ReachingDefn> l) {
		IRStmt ir = graph.getDataForNode(node).getIR();

		if (hasXGetsEForm(ir)) {
			return killXGetsE((IRMove)ir, l);

		} else {
			return SetUtils.empty();
		}
	}
	
	/**
	 * The subset of l that contains IRTemp t.
	 * @param ir of the form IRMove(IRTemp t, IRExpr)
	 */
	private Set<ReachingDefn> killXGetsE(IRMove ir, Set<ReachingDefn> l) {
		IRTemp temp = (IRTemp)ir.target();
		return l.stream()
				.filter(r -> r.getDefn().containsExpr(temp))
				.collect(Collectors.toSet());
	}


	private boolean hasXGetsEForm(IRStmt ir) {
		return ir instanceof IRMove 
				&& ((IRMove)ir).target() instanceof IRTemp
				&& ((IRMove)ir).source() instanceof IRExpr;
	}

	public Graph<IRData<ReachingData>> getGraph() {
		return graph;
	}
	
	public void showGraph(Writer writer) throws IOException {
		graph.show(writer, "AvailableExpressions", true, this::showAvailable);
	}
	
	public IRCFGBuilder<ReachingData> getBuilder() {
		return builder;
	}

	private String showAvailable(IRData<ReachingData> data) {
		Set<ReachingDefn> in = data.getFlowData().getIn();
		Set<ReachingDefn> out = data.getFlowData().getOut();
		IRStmt ir = data.getIR();

		StringBuilder sb = new StringBuilder();

		sb.append("In: ");
		sb.append(setToString(in));
		sb.append("\\n");
		
		sb.append(ir.toString());
		sb.append("\\n");

		sb.append("Out: ");
		sb.append(setToString(out));

		return sb.toString();
	}
	
	private <T> String setToString(Set<T> set) {
		StringBuilder sb = new StringBuilder();
		sb.append('{');
		
		String elems = set.stream()
			.map(Object::toString)
			.collect(Collectors.joining(","));

		sb.append(elems);

		sb.append('}');
		
		return sb.toString();
	}
	
	public static class ReachingData {
		Set<ReachingDefn> in;
		Set<ReachingDefn> out;
		
		public ReachingData() {
			in = SetUtils.empty();
			out = SetUtils.empty();
		}

		public Set<ReachingDefn> getIn() {
			return in;
		}

		public void setIn(Set<ReachingDefn> in) {
			this.in = in;
		}

		public Set<ReachingDefn> getOut() {
			return out;
		}

		public void setOut(Set<ReachingDefn> out) {
			this.out = out;
		}
	}

	public static class ReachingDefn {
		IRTemp defn;
		Node definer;
		
		public ReachingDefn(IRTemp defn, Node definer) {
			this.defn = defn;
			this.definer = definer;
		}
		
		public Node getDefiner() {
			return definer;
		}
		public void setDefiner(Node definer) {
			this.definer = definer;
		}
		
		public IRTemp getDefn() {
			return defn;
		}

		public void setDefn(IRTemp defn) {
			this.defn = defn;
		}

		public String toString() {
			return definer.getNodeId() + "";
		}
	}
}
