// A stub for a Xi CUP specification.

package mtm68.parser;
import mtm68.ast.nodes.*;
import mtm68.ast.types.*;
import mtm68.ast.nodes.binary.*;
import mtm68.ast.nodes.stmts.*;
import mtm68.exception.*;
import mtm68.util.*;
import java.util.*;
import java_cup.runtime.*;

parser code {:
    List<SyntaxErrorInfo> syntaxErrors = new ArrayList<>();

    @Override
    public void syntax_error(Symbol cur_token) {
        syntaxErrors.add(new SyntaxErrorInfo(cur_token));
    }

    /* @Override */
    /* public void unrecovered_syntax_error(Symbol cur_token) {} */

    public List<SyntaxErrorInfo> getSyntaxErrors() {
        return syntaxErrors;
    }
:}

// You might want to add types to these declarations.
terminal String ID;
terminal String STRING;
terminal Character CHARACTER;
terminal Long INTEGER;
terminal FUNAPP;
terminal INDEX;
terminal IXI, XI;

terminal USE, IF, ELSE, WHILE, RETURN, LENGTH, INT, BOOL, TRUE, FALSE; 
terminal OPEN_SQUARE, CLOSE_SQUARE, OPEN_PAREN, CLOSE_PAREN, OPEN_CURLY, CLOSE_CURLY,
	EXCLAMATION, COLON, SEMICOLON, COMMA, EQ, UNDERSCORE;
terminal ADD, SUB, MULT, DIV, MOD, HIGH_MULT, LT, LEQ, GT, GEQ, EQEQ, NEQ, AND, OR, UMINUS; 

// You might want to add types to these declarations.
nonterminal Program prog;
nonterminal Root top;
nonterminal Interface interface;
nonterminal Use use;
nonterminal List<Use> use_star;
nonterminal List<FunctionDecl> fdecl_star;
nonterminal List<FunctionDefn> fdefn_plus;
nonterminal Expr exp;
nonterminal Expr exp0;
nonterminal FExpr fexp;
nonterminal List<Expr> exp_star;
nonterminal List<Expr> exp_plus;
nonterminal List<Expr> array_init;
nonterminal SimpleDecl decl;
nonterminal ExtendedDecl ext_decl;
nonterminal Optional<ExtendedDecl> ext_decl_wild;
nonterminal List<Optional<ExtendedDecl>> multiple_assign;
nonterminal List<SimpleDecl> decl_list;
nonterminal Type ty;
nonterminal DeclType ty_decl;
nonterminal List<Type> ty_list;
nonterminal SingleAssignLHS assign_single_lhs;
nonterminal List<Type> f_type;
nonterminal FunctionDecl fdecl;
nonterminal FunctionDefn fdefn;
nonterminal Statement stmt;
nonterminal Statement stmt_semi;
nonterminal List<Statement> stmt_list;
nonterminal Return return_stmt;
nonterminal Assign assignment;
nonterminal Block block;
nonterminal Block stmt_list_ret;
nonterminal opt_comma;
nonterminal opt_semi;

// Add more nonterminals here...

precedence left OR;
precedence left AND;
precedence left EQEQ, NEQ;
precedence left LT, LEQ, GEQ, GT;
precedence left ADD, SUB;
precedence left MULT, HIGH_MULT, DIV, MOD;
precedence left UMINUS, EXCLAMATION;
precedence left FUNAPP, INDEX;

precedence nonassoc IF;
precedence nonassoc ELSE;

// HACKY???
precedence right COMMA;

start with top;

top ::= XI prog:p       {: RESULT = p; :}
    | IXI interface:i   {: RESULT = i; :}
    ;

prog ::= use_star:us fdefn_plus:ds   {: RESULT = new Program(us, ds); :}
;

interface ::= fdecl_star:ds  {: RESULT = new Interface(ds); :}
;

use ::= USE ID:id opt_semi {: RESULT = new Use(id); :}
;

use_star ::= /* epsilon */        {: RESULT = ArrayUtils.empty(); :}
    | use_star:us use:u           {: RESULT = ArrayUtils.append(us, u); :}
    ;

fdecl_star ::= /* epsilon */   {: RESULT = ArrayUtils.empty(); :}
    | fdecl_star:ds fdecl:d    {: RESULT = ArrayUtils.append(ds, d); :}
    ;

fdefn_plus ::= fdefn:d        {: RESULT = ArrayUtils.singleton(d); :}
    | fdefn_plus:ds fdefn:d   {: RESULT = ArrayUtils.append(ds, d); :}
    ;

exp ::= exp:e1 OR exp:e2           {: RESULT = new Or(e1, e2); :}
    | exp:e1 AND exp:e2            {: RESULT = new And(e1, e2); :}
    | exp:e1 EQEQ exp:e2           {: RESULT = new EqEq(e1, e2); :}
    | exp:e1 NEQ exp:e2            {: RESULT = new NotEqual(e1, e2); :}
    | exp:e1 LT exp:e2             {: RESULT = new LessThan(e1, e2); :}
    | exp:e1 LEQ exp:e2            {: RESULT = new LessThanOrEqual(e1, e2); :}
    | exp:e1 GEQ exp:e2            {: RESULT = new GreaterThanOrEqual(e1, e2); :}
    | exp:e1 GT exp:e2             {: RESULT = new GreaterThan(e1, e2); :}
    | exp:e1 ADD exp:e2            {: RESULT = new Add(e1, e2); :}
    | exp:e1 SUB exp:e2            {: RESULT = new Sub(e1, e2); :}
    | exp:e1 MULT exp:e2           {: RESULT = new Mult(e1, e2); :}
    | exp:e1 HIGH_MULT exp:e2      {: RESULT = new HighMult(e1, e2); :}
    | exp:e1 DIV exp:e2            {: RESULT = new Div(e1, e2); :}
    | exp:e1 MOD exp:e2            {: RESULT = new Mod(e1, e2); :}
    | SUB exp:e                    {: RESULT = new Negate(e); :}  %prec UMINUS
    | EXCLAMATION exp:e            {: RESULT = new Not(e); :}  %prec EXCLAMATION
    | INTEGER:n                    {: RESULT = new IntLiteral(n); :}
    | fexp:e                       {: RESULT = e; :} %prec FUNAPP
    | exp:e1 OPEN_SQUARE exp:e2 CLOSE_SQUARE {: RESULT = new ArrayIndex(e1, e2); :} %prec INDEX  
    | ID:id                        {: RESULT = new Var(id); :}
    | OPEN_PAREN exp:e CLOSE_PAREN   {: RESULT = e; :}
    | OPEN_CURLY array_init:args CLOSE_CURLY {: RESULT = new ArrayInit(args); :}
    | TRUE                         {: RESULT = new BoolLiteral(true); :}
    | FALSE                        {: RESULT = new BoolLiteral(false); :}
    | CHARACTER:c                  {: RESULT = new CharLiteral(c); :}
    | STRING:s                     {: RESULT = new StringLiteral(s); :}
    | LENGTH OPEN_PAREN exp:e CLOSE_PAREN {: RESULT = new ArrayLength(e); :}
    ;

fexp ::= ID:id OPEN_PAREN exp_star:args CLOSE_PAREN     {: RESULT = new FExpr(id, args); :} 
;

exp_star ::= /* epsilon */  {: RESULT = new ArrayList<Expr>(); :}
    | exp_plus:e            {: RESULT = e; :}
    ;

exp_plus ::= exp:e               {: RESULT = ArrayUtils.singleton(e); :}
    | exp_plus:es COMMA exp:e    {: es.add(e); RESULT = es; :}
    ;

array_init ::= /* epsilon */           {: RESULT = new ArrayList<Expr>(); :}
    | exp_plus:e opt_comma             {: RESULT = e; :}
    ;

opt_comma ::= /* epsilon */
    | COMMA
    ;

// x:int
decl ::= ID:id COLON ty:t   {: RESULT = new SimpleDecl(id, t); :}
;

// x: int[gcd(a,b)]
ext_decl ::= ID:id COLON ty_decl:t {: RESULT = new ExtendedDecl(id, t); :} 
;

// f
// f()
// f[3]
exp0 ::= exp0:e1 OPEN_SQUARE exp:e2 CLOSE_SQUARE {: RESULT = new ArrayIndex(e1, e2); :} %prec INDEX 
    | fexp:e                                     {: RESULT = e; :}
    | ID:id                                      {: RESULT = new Var(id); :}
;

// x:int[2][2] = { {1, 0}, {0, 1}}
// x = 3
// e1[e2] = 3
// [0]
// true[0]
// f(x)[0]
assign_single_lhs ::= ID:id   {: RESULT = new Var(id); :}
    | ext_decl:d              {: RESULT = d; :}
    | exp0:e1 OPEN_SQUARE exp:e2 CLOSE_SQUARE {: RESULT = new ArrayIndex(e1, e2); :} %prec INDEX 
    ;

ext_decl_wild ::= ext_decl:d    {: RESULT = Optional.of(d); :}
    | UNDERSCORE                {: RESULT = Optional.empty(); :}
    ;

// x:int, y:int = f()
// _, y:int = f()
// _ = f()
multiple_assign ::= ext_decl_wild:d1 COMMA ext_decl_wild:d2  {: RESULT = ArrayUtils.append(ArrayUtils.singleton(d1), d2); :}
    | multiple_assign:ds COMMA ext_decl_wild:d               {: RESULT = ArrayUtils.append(ds, d); :}
    ;

decl_list ::=  /* epsilon */          {: RESULT = ArrayUtils.empty(); :}
    | decl:d                          {: RESULT = ArrayUtils.singleton(d); :}
    | decl_list:ds COMMA decl:d       {: RESULT = ArrayUtils.append(ds, d); :}
    ;

ty ::= INT                            {: RESULT = Types.INT; :}
    | BOOL                            {: RESULT = Types.BOOL; :}
    | ty:t OPEN_SQUARE CLOSE_SQUARE   {: RESULT = Types.ARRAY(t); :}
    ;

ty_decl ::= INT                                  {: RESULT = new DeclType(Types.INT); :}
    | BOOL                                       {: RESULT = new DeclType(Types.BOOL); :}
    | ty_decl:t OPEN_SQUARE exp:e CLOSE_SQUARE   {: if(t.canAddMoreIndices()) { t.addArrayLayer(); t.addIndexExpr(e); RESULT = t; }
                                                    else { report_error("Invalid array indices in decl", null); RESULT = t; } :}
    | ty_decl:t OPEN_SQUARE CLOSE_SQUARE         {: t.addArrayLayer(); RESULT = t; :}
    ;

ty_list ::= ty:t              {: RESULT = ArrayUtils.singleton(t); :}
    | ty_list:ts COMMA ty:t   {: RESULT = ArrayUtils.append(ts, t); :}
    ;

// sort(x: int[]) { ... }
// gcd(a: int, b : int) : int, bool { ... }
f_type ::= /* epsilon */   {: RESULT = ArrayUtils.empty(); :}
    | COLON ty_list:ts     {: RESULT = ts; :}
    ;

fdecl ::= ID:id OPEN_PAREN decl_list:args CLOSE_PAREN f_type:rets  {: RESULT = new FunctionDecl(id, args, rets); :}
;

fdefn ::= fdecl:d block:b  {: RESULT = new FunctionDefn(d, b); :}
;

stmt ::= assignment:s               {: RESULT = s; :}
    | IF exp:e stmt:s               {: RESULT = new If(e, s); :}
    | IF exp:e stmt:s1 ELSE stmt:s2 {: RESULT = new If(e, s1, s2); :}
    | WHILE exp:e stmt:s            {: RESULT = new While(e, s); :} 
    | fexp:e                        {: RESULT = new FunctionCall(e); :}
    | ext_decl:d                    {: RESULT = d; :}
    | block:b                       {: RESULT = b; :}
    | error                         {: RESULT = new ErrorStatement("Parse error"); :}
    ;

stmt_semi ::= stmt:s opt_semi       {: RESULT = s; :}
;

stmt_list ::= /* epsilon */         {: RESULT = ArrayUtils.empty(); :}
    | stmt_list:ss stmt_semi:s  {: RESULT = ArrayUtils.append(ss, s); :}
;

opt_semi ::= /* epsilon */
    | SEMICOLON
    ;

return_stmt ::= RETURN exp_star:es opt_semi   {: RESULT = new Return(es); :}
;

assignment ::= assign_single_lhs:lhs EQ exp:e  {: RESULT = new SingleAssign(lhs, e); :}
    | multiple_assign:m EQ fexp:e              {: RESULT = new MultipleAssign(m, e); :}
    | UNDERSCORE EQ fexp:e                     {: RESULT = new MultipleAssign(ArrayUtils.singleton(Optional.empty()), e); :}
    ;

block ::= OPEN_CURLY stmt_list_ret:b CLOSE_CURLY {: RESULT = b; :}
;

stmt_list_ret ::= stmt_list:ss   {: RESULT = new Block(ss); :}
    | stmt_list:ss return_stmt:s {: RESULT = new Block(ss, s); :}
    ;
